fmod FIELD is
	sort Field .
endfm

fmod COMM is
	protecting STRING .
	sorts Comm Send Receive Channel .
	subsort Send < Comm .
	subsort Receive < Comm .
	op _?_ : Channel String -> Receive .
	op _!_ : Channel String -> Send .
endfm

view Comm from TRIV to COMM is
	sort Elt to Comm .
endv

fmod DNA is
	protecting FIELD .
	protecting COMM .
	protecting TRUTH-VALUE .

	sorts DNA Recursive .
	subsort Recursive < DNA .

	op _o+_ : DNA DNA -> DNA [ctor comm assoc metadata "nondeterministic choice" prec 43] .
	op _;_ : String DNA -> DNA [ctor metadata "sequential composition" prec 40 gather (E e)] .
	op _;_ : Comm DNA -> DNA [ctor metadata "sequential composition" prec 40 gather (E e)] .
	op _||_ : DNA DNA -> DNA [ctor comm metadata "parallel composition" prec 42 gather (E e)] .

	op _|_ : DNA DNA -> DNA [ctor comm prec 42 gather (E e)] .
	op _||<_ : DNA DNA -> DNA [ctor metadata "left merge" prec 42 gather (E e)] .

	op zero : -> String .
	op bot : -> DNA .
	op rcfg(_,_) : Channel String -> Comm .

	op pi{_}(_) : Nat DNA -> DNA .

	op @Send(_>>_) : Channel String -> Send [strat(0)] .
	op @Receive(_>>_) : Channel String -> Receive [strat(0)] .

	op @NetKAT(_) : String -> String [strat(0)] .
	op @Channel(_) : Channel -> Channel [strat(0)] .

	op parseCond(_) : String -> Bool .
	op parseCond(_) : Channel -> Bool .

	var X : Channel .
	var D : DNA .
	var N : String .


	eq (X ! N) ; D = @Send(X >> N) ; D .
	eq (X ? N) ; D = @Receive(X >> N) ; D .

	ceq @Send(X >> N) ; D =  @Send( @Channel(X) >> N) ; D  if parseCond(X) .
	ceq @Receive(X >> N) ; D =  @Receive( @Channel(X) >> N) ; D  if parseCond(X) .
	ceq N ; D = @NetKAT(N) ; D if parseCond(N) .

	eq parseCond(@NetKAT(N)) = false .
	eq parseCond(@Channel(X)) = false .
	eq parseCond(N) = true [owise] .
	eq parseCond(X) = true [owise] .
endfm



